/**
 * Servicio para an√°lisis y generaci√≥n de tags basados en contenido de mensajes
 */

// Tags disponibles
const AVAILABLE_TAGS = ['General', 'Estancias', 'Planes', 'Incidencias'];

// Palabras clave por tag (en espa√±ol e ingl√©s, singular y plural)
const KEYWORDS_BY_TAG = {
    'Estancias': [
        // Espa√±ol
        'estancia', 'estancias', 'alojamiento', 'alojamientos', 'reserva', 'reservas',
        'habitaci√≥n', 'habitaciones', 'check-in', 'check-out', 'checkin', 'checkout',
        'hospedaje', 'hospedajes', 'casa', 'casas', 'apartamento', 'apartamentos',
        'piso', 'pisos', 'vivienda', 'viviendas', 'alquiler', 'alquileres',
        // Ingl√©s
        'stay', 'stays', 'accommodation', 'accommodations', 'booking', 'bookings',
        'room', 'rooms', 'house', 'houses', 'apartment', 'apartments', 'rental', 'rentals',
        'lodging', 'lodgings', 'reservation', 'reservations'
    ],
    'Planes': [
        // Espa√±ol
        'plan', 'planes', 'actividad', 'actividades', 'excursi√≥n', 'excursiones',
        'tour', 'tours', 'visita', 'visitas', 'evento', 'eventos', 'experiencia',
        'experiencias', 'actividad', 'actividades', 'diversi√≥n', 'entretenimiento',
        'ocio', 'recreaci√≥n', 'recreo', 'pasatiempo', 'pasatiempos',
        // Ingl√©s
        'plan', 'plans', 'activity', 'activities', 'tour', 'tours', 'visit', 'visits',
        'event', 'events', 'experience', 'experiences', 'entertainment', 'recreation',
        'leisure', 'hobby', 'hobbies', 'fun', 'amusement'
    ],
    'Incidencias': [
        // Espa√±ol
        'incidencia', 'incidencias', 'problema', 'problemas', 'aver√≠a', 'aver√≠as',
        'reparaci√≥n', 'reparaciones', 'mantenimiento', 'mantenimientos', 'urgencia',
        'urgencias', 'fallo', 'fallos', 'error', 'errores', 'defecto', 'defectos',
        'mal funcionamiento', 'disfunci√≥n', 'disfunciones', 't√©cnico', 't√©cnicos',
        'servicio t√©cnico', 'asistencia t√©cnica', 'soporte', 'soporte t√©cnico',
        // Ingl√©s
        'incident', 'incidents', 'problem', 'problems', 'issue', 'issues',
        'breakdown', 'breakdowns', 'repair', 'repairs', 'maintenance',
        'emergency', 'emergencies', 'failure', 'failures', 'error', 'errors',
        'defect', 'defects', 'malfunction', 'malfunctions', 'technical', 'technician',
        'support', 'troubleshooting', 'fix', 'fixes'
    ]
};

// Cach√© para keywords normalizadas (optimizaci√≥n de performance)
let normalizedKeywordsCache = null;

// Funci√≥n para obtener keywords normalizadas (con cach√©)
function getNormalizedKeywords() {
    if (normalizedKeywordsCache) {
        return normalizedKeywordsCache;
    }
    
    const normalized = {};
    for (const [tag, keywords] of Object.entries(KEYWORDS_BY_TAG)) {
        normalized[tag] = new Set(keywords.map(keyword => normalizeText(keyword)));
    }
    
    normalizedKeywordsCache = normalized;
    return normalized;
}

// Funci√≥n para normalizar texto (quitar acentos, convertir a min√∫sculas)
function normalizeText(text) {
    return text
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // Quitar acentos
        .replace(/[^\w\s]/g, ' ') // Reemplazar caracteres especiales con espacios
        .replace(/\s+/g, ' ') // Normalizar espacios
        .trim();
}

// Funci√≥n para extraer palabras del texto
function extractWords(text) {
    return text.split(/\s+/).filter(word => word.length > 0);
}

/**
 * Analiza el contenido de un mensaje y devuelve tags relevantes (OPTIMIZADO)
 * @param {string} text - Texto del mensaje a analizar
 * @param {number} maxTags - N√∫mero m√°ximo de tags a devolver (por defecto 3)
 * @returns {Promise<string[]>} Array de tags relevantes
 */
export async function analyzeMessageAndGetTags(text, maxTags = 3) {
    try {
        if (!text || typeof text !== 'string') {
            console.warn('TagService: Texto inv√°lido proporcionado');
            return ['General']; // Tag por defecto
        }

        const normalizedText = normalizeText(text);
        const words = new Set(extractWords(normalizedText)); // Usar Set para b√∫squedas O(1)
        const normalizedKeywords = getNormalizedKeywords(); // Usar cach√©
        
        console.log(`üîç Analizando texto para tags: "${text.substring(0, 50)}..."`);
        console.log(`üìù Palabras extra√≠das: [${Array.from(words).join(', ')}]`);
        
        const matchedTags = [];
        
        // Analizar cada tag usando Sets para b√∫squedas O(1)
        for (const [tag, keywordSet] of Object.entries(normalizedKeywords)) {
            // Verificar si alguna palabra del texto coincide con las palabras clave del tag
            for (const word of words) {
                if (keywordSet.has(word)) {
                    matchedTags.push(tag);
                    console.log(`‚úÖ Tag "${tag}" asignado por palabra clave: "${word}"`);
                    break; // Una coincidencia es suficiente para asignar el tag
                }
            }
        }
        
        // Si no se encontraron tags espec√≠ficos, asignar "General"
        if (matchedTags.length === 0) {
            matchedTags.push('General');
            console.log(`üè∑Ô∏è Tag "General" asignado por defecto`);
        }
        
        // Limitar el n√∫mero de tags seg√∫n maxTags
        const finalTags = matchedTags.slice(0, maxTags);
        
        console.log(`üè∑Ô∏è Tags finales: [${finalTags.join(', ')}]`);
        
        return finalTags;
        
    } catch (error) {
        console.error('Error en analyzeMessageAndGetTags:', error);
        return ['General']; // Tag por defecto en caso de error
    }
}

/**
 * Obtiene todos los tags disponibles
 * @returns {string[]} Array con todos los tags disponibles
 */
export function getAllAvailableTags() {
    return AVAILABLE_TAGS;
}

/**
 * Valida si un tag es v√°lido
 * @param {string} tag - Tag a validar
 * @returns {boolean} True si el tag es v√°lido
 */
export function isValidTag(tag) {
    return AVAILABLE_TAGS.includes(tag);
}

/**
 * Obtiene palabras clave por tag
 * @param {string} tag - Tag del cual obtener palabras clave
 * @returns {string[]} Array de palabras clave del tag
 */
export function getKeywordsByTag(tag) {
    return KEYWORDS_BY_TAG[tag] || [];
}

/**
 * Obtiene todos los tags con sus palabras clave
 * @returns {Object} Objeto con tags y sus palabras clave
 */
export function getTagsWithKeywords() {
    return KEYWORDS_BY_TAG;
}

/**
 * Limpia el cach√© de keywords normalizadas
 * √ötil si se modifican las keywords en tiempo de ejecuci√≥n
 */
export function clearKeywordsCache() {
    normalizedKeywordsCache = null;
    console.log('üóëÔ∏è Cach√© de keywords limpiado');
}

/**
 * Obtiene estad√≠sticas de performance del servicio
 * @returns {Object} Estad√≠sticas de uso
 */
export function getPerformanceStats() {
    return {
        cacheInitialized: normalizedKeywordsCache !== null,
        totalKeywords: Object.values(KEYWORDS_BY_TAG).reduce((sum, keywords) => sum + keywords.length, 0),
        availableTags: AVAILABLE_TAGS.length
    };
} 